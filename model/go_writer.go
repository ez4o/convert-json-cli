package model

import (
	"os"
	"path"
)

type GoWriter struct {
	nested bool
}

func (gw *GoWriter) SetNested(nested bool) {
	gw.nested = nested
}

func (gw *GoWriter) Write(abstractStructs []Struct) error {
	file, err := os.Create(path.Join("out", "go_result.go"))
	if err != nil {
		return err
	}
	defer file.Close()

	for _, abstractStruct := range abstractStructs {
		if abstractStruct.Name == "Nested" {
			continue
		}

		_, err := file.WriteString(gw.GetStruct(abstractStruct))
		if err != nil {
			return err
		}
	}

	return nil
}

func (gw *GoWriter) GetStruct(abstractStruct Struct) string {
	var nested string = ""
	if abstractStruct.Name == "AutoGenerated" && gw.nested {
		nested = "[]"
	}

	return "type " + abstractStruct.Name + " " + nested + "struct {\n" + gw.GetFields(abstractStruct.Fields) + "}\n\n"
}

func (gw *GoWriter) GetFields(fields []Field) string {
	var result string = ""

	for _, field := range fields {
		result += gw.GetField(field)
	}

	return result
}

func (gw *GoWriter) GetField(field Field) string {
	var typeName string = ""

	if field.TypeName[len(field.TypeName)-2:] == "[]" {
		typeName = "[]" + gw.GetTypeName(field.TypeName[:len(field.TypeName)-2])
	} else {
		typeName = gw.GetTypeName(field.TypeName)
	}

	return "\t" + field.Index + "\t" + typeName + "\n"
}

func (gw *GoWriter) GetTypeName(typeName string) string {
	return typeName
}
