package model

import "os"

type SwiftWriter struct {
	outputPath string
	nested     bool
}

func (sw *SwiftWriter) SetOutputPath(outputPath string) {
	sw.outputPath = outputPath
}

func (sw *SwiftWriter) SetNested(nested bool) {
	sw.nested = nested
}

func (sw *SwiftWriter) Write(abstractStructs []Struct) error {
	file, err := os.Create(sw.outputPath)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString("import Foundation\n\n")

	for _, abstractStruct := range abstractStructs {
		if abstractStruct.Name == "Nested" {
			_, err := file.WriteString("typealias Nested = [AutoGenerated]\n\n")
			if err != nil {
				return err
			}
			continue
		}

		_, err := file.WriteString(sw.GetStruct(abstractStruct))
		if err != nil {
			return err
		}
	}

	return nil
}

func (sw *SwiftWriter) GetStruct(abstractStruct Struct) string {
	return "class " + abstractStruct.Name + " {\n" + sw.GetFields(abstractStruct.Fields) + "\n" + sw.getConstructor(abstractStruct) + "}\n\n"
}

func (sw *SwiftWriter) GetFields(fields []Field) string {
	var result string = ""

	for i, field := range fields {
		result += sw.GetField(i, field)
	}

	return result
}

func (sw *SwiftWriter) GetField(_ int, field Field) string {
	var typeName string = ""

	if field.TypeName[len(field.TypeName)-2:] == "[]" {
		typeName = "[" + sw.GetTypeName(field.TypeName[:len(field.TypeName)-2]) + "]"
	} else {
		typeName = sw.GetTypeName(field.TypeName)
	}

	return "\tlet " + field.Index + ": " + typeName + "\n"
}

func (sw *SwiftWriter) GetTypeName(typeName string) string {
	switch typeName {
	case "int16":
		return "Int"
	case "int32":
		return "Int"
	case "int64":
		return "Int"
	case "float32":
		return "Float"
	case "float64":
		return "Float"
	case "string":
		return "String"
	case "bool":
		return "Bool"
	default:
		return typeName
	}
}

func (sw *SwiftWriter) getConstructor(abstractStruct Struct) string {
	return "\tinit(" + sw.getConstructorParams(abstractStruct) + ") {\n" + sw.getConstructorAssignments(abstractStruct) + "\t}\n"
}

func (sw *SwiftWriter) getConstructorParams(abstractStruct Struct) string {
	var result string = ""

	for _, field := range abstractStruct.Fields {
		var typeName string = ""

		if field.TypeName[len(field.TypeName)-2:] == "[]" {
			typeName = "[" + sw.GetTypeName(field.TypeName[:len(field.TypeName)-2]) + "]"
		} else {
			typeName = sw.GetTypeName(field.TypeName)
		}

		result += field.Index + ": " + typeName + ", "
	}

	return result
}

func (sw *SwiftWriter) getConstructorAssignments(abstractStruct Struct) string {
	var result string = ""

	for _, field := range abstractStruct.Fields {
		result += "\t\tself." + field.Index + " = " + field.Index + "\n"
	}

	return result
}
