package model

import (
	"encoding/json"
)

type JSONConverter struct {
	Writer IWriter
}

func (jc *JSONConverter) Convert(jsonString string) error {
	abstractStructs, err := jc.GetAbstractStructs(jsonString)
	if err != nil {
		return err
	}

	return jc.Writer.Write(abstractStructs)
}

func (jc *JSONConverter) GetAbstractStructs(jsonString string) ([]Struct, error) {
	if jsonString[0] == '[' {
		jc.Writer.SetNested(true)

		var result []interface{}

		err := json.Unmarshal([]byte(jsonString), &result)
		if err != nil {
			return nil, err
		}

		b, err := json.Marshal(result[0])
		if err != nil {
			return nil, err
		}

		abstractStructs, err := Parse("AutoGenerated", string(b))
		if err != nil {
			return nil, err
		}

		abstractStructs = append(abstractStructs, Struct{Name: "Nested", Fields: []Field{{Index: "", TypeName: "AutoGenerated[]"}}})

		return abstractStructs, nil
	} else {
		jc.Writer.SetNested(false)

		abstractStructs, err := Parse("AutoGenerated", jsonString)
		if err != nil {
			return nil, err
		}

		return abstractStructs, nil
	}
}
